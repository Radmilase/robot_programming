// Generated by gencpp from file ur_perception/DetectedObject.msg
// DO NOT EDIT!


#ifndef UR_PERCEPTION_MESSAGE_DETECTEDOBJECT_H
#define UR_PERCEPTION_MESSAGE_DETECTEDOBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur_perception
{
template <class ContainerAllocator>
struct DetectedObject_
{
  typedef DetectedObject_<ContainerAllocator> Type;

  DetectedObject_()
    : label()
    , confidence(0.0)
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)  {
    }
  DetectedObject_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , confidence(0.0)
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef int32_t _x1_type;
  _x1_type x1;

   typedef int32_t _y1_type;
  _y1_type y1;

   typedef int32_t _x2_type;
  _x2_type x2;

   typedef int32_t _y2_type;
  _y2_type y2;





  typedef boost::shared_ptr< ::ur_perception::DetectedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_perception::DetectedObject_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObject_

typedef ::ur_perception::DetectedObject_<std::allocator<void> > DetectedObject;

typedef boost::shared_ptr< ::ur_perception::DetectedObject > DetectedObjectPtr;
typedef boost::shared_ptr< ::ur_perception::DetectedObject const> DetectedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_perception::DetectedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_perception::DetectedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur_perception::DetectedObject_<ContainerAllocator1> & lhs, const ::ur_perception::DetectedObject_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.confidence == rhs.confidence &&
    lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur_perception::DetectedObject_<ContainerAllocator1> & lhs, const ::ur_perception::DetectedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur_perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ur_perception::DetectedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_perception::DetectedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_perception::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_perception::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_perception::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_perception::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_perception::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c092459209ab249fb5c5c03a15ab9cb";
  }

  static const char* value(const ::ur_perception::DetectedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c092459209ab249ULL;
  static const uint64_t static_value2 = 0xfb5c5c03a15ab9cbULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_perception::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_perception/DetectedObject";
  }

  static const char* value(const ::ur_perception::DetectedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_perception::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label\n"
"float32 confidence\n"
"int32 x1\n"
"int32 y1\n"
"int32 x2\n"
"int32 y2\n"
;
  }

  static const char* value(const ::ur_perception::DetectedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_perception::DetectedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.confidence);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_perception::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_perception::DetectedObject_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x1);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y1);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x2);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_PERCEPTION_MESSAGE_DETECTEDOBJECT_H
